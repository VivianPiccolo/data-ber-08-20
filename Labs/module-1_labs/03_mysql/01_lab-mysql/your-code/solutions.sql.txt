1. From the order_items table, find the price of the highest priced order item and lowest price order item.

SELECT
	product_id,
	price
FROM order_items
ORDER BY price DESC
LIMIT 1;

Result:
6735

SELECT
	product_id,
	price,
FROM order_items
ORDER BY price ASC
LIMIT 1;

0.85	

2. From the order_items table, what is range of the shipping_limit_date of the orders?

SELECT 
	MAX(shipping_limit_date),
    MIN(shipping_limit_date)
FROM olist.order_items

Result:

2016-09-19 02:15:34 to 2020-04-10 00:35:08

3. From the customers table, find the 3 states with the greatest number of customers.

SELECT
       customer_unique_id,
       customer_state,
       COUNT(customer_state)
FROM olist.customers
group by customer_state
ORDER BY COUNT(customer_state) DESC
LIMIT 1000

Result:
SP, RJ, MG

4. From the customers table, within the state with the greatest number of customers, find the 3 cities with the greatest number of customers.

SELECT
       customer_state,
       customer_city,
       COUNT(customer_city)
FROM olist.customers
WHERE customer_state = 'SP'
group by customer_city
ORDER BY count(customer_city) DESC

Result:
sao paulo, campinas and guarulhos

5. From the closed_deals table, how many distinct business segments are there (not including null)?

SELECT
		business_segment,
        count(DISTINCT 1)
FROM olist.closed_deals
group by business_segment
ORDER BY BUSINESS_SEGMENT

Result:
33

6. From the closed_deals table, sum the declared_monthly_revenue for duplicate row values in business_segment and find the 3 business segments with the highest declared monthly revenue (of those that declared revenue).
Result:

SELECT
        business_segment,
        SUM(declared_monthly_revenue) 
FROM olist.closed_deals
group by BUSINESS_SEGMENT
order by SUM(declared_monthly_revenue)DESC

result:
construction_tools_house_garden, phone_mobile and home_decor

7. From the order_reviews table, find the total number of distinct review score values.

SELECT
	count(distinct review_score)
	FROM olist.order_reviews

Result:
5

8. In the order_reviews table, create a new column with a description that corresponds to each number category for each review score from 1 - 5.

example to use
SELECT 
	order_id, 
	product_id,
	CASE 
		WHEN price < 100 THEN 'cheap'
		WHEN price < 350 THEN 'medium'
		ELSE 'expensive'
	END 								AS price_catagory

9. From the order_reviews table, find the review score occurring most frequently and how many times it occurs.

Result:
5, 57420